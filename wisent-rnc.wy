;;; wisent-dot.wy --- GraphViz DOT file parser

;; Copyright (C) 2003, 2004 Eric M. Ludlam

;; Author: Eric Ludlam <zappo@gnu.org>
;; Keywords: syntax
;; X-RCS: $Id: wisent-dot.wy,v 1.7 2005/09/30 20:07:11 zappo Exp $

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or (at
;; your option) any later version.

;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Commentary:
;;
;; Parser for GraphViz DOT language.
;; The language is declaritive and the whole thing is parsed.
;; The result could be used as a data structure representing a graph.

%languagemode  nrnc-mode

%start rnc-file
;; Needed for EXPANDFULL
%start pattern-block
%start pattern

;;; KEYWORDS
%type    <keyword>
%keyword ATTRIBUTE  "attribute"
%put     ATTRIBUTE  summary "attribute nameClass { pattern }"
%keyword DEFAULT    "default"
%keyword DATATYPES  "datatypes"
%keyword DIV        "div"
%keyword ELEMENT    "element"
%put     ELEMENT    summary "element nameClass { pattern }"
%keyword EMPTY      "empty"
%keyword EXTERNAL   "external"
%keyword GRAMMAR    "grammar"
%keyword INCLUDE    "include"
%keyword INHERIT    "inherit"
%keyword LIST       "list"
%keyword MIXED      "mixed"
%keyword NAMESPACE  "namespace"
%keyword NOTALLOWED "notAllowed"
%keyword PARENT     "parent"
%keyword START      "start"
%keyword STRING     "string"
%keyword TEXT       "text"
%keyword TOKEN      "token"

;;; Punctuation Types
%type  <punctuation> syntax "\\s.+"
%token <punctuation> EQUAL    "="
%token <punctuation> OREQUAL  "|="
%token <punctuation> ANDEQUAL "&="
%token <punctuation> SEMI   ";"
%token <punctuation> COMMA  ","
%token <punctuation> AND      "&"
%token <punctuation> OR       "|"
%token <punctuation> OPT      "?"
%token <punctuation> PLUS     "+"
%token <punctuation> MUL      "*"

;;; BLOCK types
%type  <block>
%token <block>       BRACKET_BLOCK "(LBRACKET RBRACKET)"
%token <block>       BRACE_BLOCK   "(LBRACE RBRACE)"
%token <block>       PAREN_BLOCK   "(LPAREN RPAREN)"
%token <open-paren>  LBRACE        "{"
%token <close-paren> RBRACE        "}"
%token <open-paren>  LBRACKET      "["
%token <close-paren> RBRACKET      "]"
%token <open-paren>  LPAREN        "("
%token <close-paren> RPAREN        ")"


;;; Bland default types
%type  <symbol>
%token <symbol> symbol

%type  <string>
%token <string> string

%type  <number>
%token <number> number

%%

rnc-file
  : decl
  | start
  | define
  | div
  ;

decl
  : NAMESPACE symbol EQUAL string
    {
     (TAG $2 'namespace)
    }
  | DEFAULT NAMESPACE symbol EQUAL string
    {
     (TAG $3 'namespace)
    }
  | DATATYPES symbol EQUAL string
    {
     (TAG $2 'namespace)
    }
  ;

start
  : START assign-method pattern
    (TAG "START" 'start :members (EXPANDFULL $3 pattern-block))
  ;

div
  : DIV BRACE_BLOCK
    (TAG "DIV" 'div :members (EXPANDFULL $2 pattern-block))
  ;

assign-method
  : EQUAL
  | OREQUAL
  | ANDEQUAL
  ;

pattern
  : ELEMENT symbol BRACE_BLOCK
    (TAG $2 'element :members (EXPANDFULL $3 pattern-block))
  | ATTRIBUTE symbol BRACE_BLOCK
    (TAG "attribute" 'elements :attributes (EXPANDFULL $3 pattern-block))
  | symbol
    (TAG $1 'identifier)
  | string
  | EMPTY
    (TAG "EMPTY" 'empty)
  | NOTALLOWED
    (TAG "NOTALLOWED" 'notallowed)
  | TEXT
    (TAG "TEXT" 'text)
  ;

define
  : symbol assign-method pattern-block
    (TAG $1 'define :attributes (EXPANDFULL $3 pattern-block))
  ;

pattern-block
  : LBRACE
    ()
  | RBRACE
    ()
  | COMMA
    ()
  | AND
    ()
  | OR
    ()
  | pattern OPT
  | pattern PLUS
  | pattern MUL
  | pattern
  ;

%%

(define-lex wisent-dot-lexer
  "Lexical analyzer that handles DOT buffers.
It ignores whitespace, newlines and comments."
  semantic-lex-ignore-whitespace
  semantic-lex-ignore-newline
  semantic-lex-ignore-comments
  wisent-dot-wy--<keyword>-keyword-analyzer
  wisent-dot-wy--<symbol>-regexp-analyzer
  wisent-dot-wy--<block>-block-analyzer
  ;; ?? semantic-lex-close-paren
  wisent-dot-wy--<number>-regexp-analyzer
  wisent-dot-wy--<string>-sexp-analyzer
  wisent-dot-wy--<punctuation>-string-analyzer
  semantic-lex-default-action
  )

;;; wisent-dot.wy ends here
